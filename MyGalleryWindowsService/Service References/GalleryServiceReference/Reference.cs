//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyGalleryWindowsService.Service_References.GalleryServiceReference {
    using System;
    using System.Runtime.Serialization;

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name="Size", Namespace="http://schemas.datacontract.org/2004/07/System.Drawing")]
    [Serializable()]
    public partial struct Size : System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [NonSerialized()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int heightField;
        
        private int widthField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [DataMember(IsRequired=true)]
        public int height {
            get {
                return this.heightField;
            }
            set {
                if ((this.heightField.Equals(value) != true)) {
                    this.heightField = value;
                    this.RaisePropertyChanged("height");
                }
            }
        }
        
        [DataMember(IsRequired=true)]
        public int width {
            get {
                return this.widthField;
            }
            set {
                if ((this.widthField.Equals(value) != true)) {
                    this.widthField = value;
                    this.RaisePropertyChanged("width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="GalleryServiceReference.IMyGalleryProvider")]
    public interface IMyGalleryProvider {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowAlbumResponse")]
        Model.Photo[] ShowAlbum(int albumID, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowAlbumResponse")]
        System.Threading.Tasks.Task<Model.Photo[]> ShowAlbumAsync(int albumID, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowPublicAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowPublicAlbumResponse")]
        Model.Photo[] ShowPublicAlbum(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowPublicAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowPublicAlbumResponse")]
        System.Threading.Tasks.Task<Model.Photo[]> ShowPublicAlbumAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowGallery", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowGalleryResponse")]
        Model.Album[] ShowGallery(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowGallery", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowGalleryResponse")]
        System.Threading.Tasks.Task<Model.Album[]> ShowGalleryAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowOnlyPublic", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowOnlyPublicResponse")]
        Model.Album[] ShowOnlyPublic();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ShowOnlyPublic", ReplyAction="http://tempuri.org/IMyGalleryProvider/ShowOnlyPublicResponse")]
        System.Threading.Tasks.Task<Model.Album[]> ShowOnlyPublicAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/CreateAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/CreateAlbumResponse")]
        bool CreateAlbum(string album, string description, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/CreateAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/CreateAlbumResponse")]
        System.Threading.Tasks.Task<bool> CreateAlbumAsync(string album, string description, string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/GetPhoto", ReplyAction="http://tempuri.org/IMyGalleryProvider/GetPhotoResponse")]
        byte[] GetPhoto(int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/GetPhoto", ReplyAction="http://tempuri.org/IMyGalleryProvider/GetPhotoResponse")]
        System.Threading.Tasks.Task<byte[]> GetPhotoAsync(int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/GetThumbnail", ReplyAction="http://tempuri.org/IMyGalleryProvider/GetThumbnailResponse")]
        byte[] GetThumbnail(int albumID, int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/GetThumbnail", ReplyAction="http://tempuri.org/IMyGalleryProvider/GetThumbnailResponse")]
        System.Threading.Tasks.Task<byte[]> GetThumbnailAsync(int albumID, int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ImageUpload", ReplyAction="http://tempuri.org/IMyGalleryProvider/ImageUploadResponse")]
        bool ImageUpload(Model.UploadImage imageToUpload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ImageUpload", ReplyAction="http://tempuri.org/IMyGalleryProvider/ImageUploadResponse")]
        System.Threading.Tasks.Task<bool> ImageUploadAsync(Model.UploadImage imageToUpload);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/DeleteAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/DeleteAlbumResponse")]
        bool DeleteAlbum(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/DeleteAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/DeleteAlbumResponse")]
        System.Threading.Tasks.Task<bool> DeleteAlbumAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/DeletePhoto", ReplyAction="http://tempuri.org/IMyGalleryProvider/DeletePhotoResponse")]
        bool DeletePhoto(int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/DeletePhoto", ReplyAction="http://tempuri.org/IMyGalleryProvider/DeletePhotoResponse")]
        System.Threading.Tasks.Task<bool> DeletePhotoAsync(int photoID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/PublishAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/PublishAlbumResponse")]
        bool PublishAlbum(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/PublishAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/PublishAlbumResponse")]
        System.Threading.Tasks.Task<bool> PublishAlbumAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/UnPublishAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/UnPublishAlbumResponse")]
        bool UnPublishAlbum(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/UnPublishAlbum", ReplyAction="http://tempuri.org/IMyGalleryProvider/UnPublishAlbumResponse")]
        System.Threading.Tasks.Task<bool> UnPublishAlbumAsync(int albumID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ActivateAcc", ReplyAction="http://tempuri.org/IMyGalleryProvider/ActivateAccResponse")]
        int ActivateAcc(string activationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/ActivateAcc", ReplyAction="http://tempuri.org/IMyGalleryProvider/ActivateAccResponse")]
        System.Threading.Tasks.Task<int> ActivateAccAsync(string activationCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/GenerateAndInsertThumbnail", ReplyAction="http://tempuri.org/IMyGalleryProvider/GenerateAndInsertThumbnailResponse")]
        void GenerateAndInsertThumbnail(Model.Photo photo, Size thumbSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/GenerateAndInsertThumbnail", ReplyAction="http://tempuri.org/IMyGalleryProvider/GenerateAndInsertThumbnailResponse")]
        System.Threading.Tasks.Task GenerateAndInsertThumbnailAsync(Model.Photo photo, Size thumbSize);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/PhotosWithoutThumb", ReplyAction="http://tempuri.org/IMyGalleryProvider/PhotosWithoutThumbResponse")]
        Model.Photo[] PhotosWithoutThumb();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMyGalleryProvider/PhotosWithoutThumb", ReplyAction="http://tempuri.org/IMyGalleryProvider/PhotosWithoutThumbResponse")]
        System.Threading.Tasks.Task<Model.Photo[]> PhotosWithoutThumbAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMyGalleryProviderChannel : IMyGalleryProvider, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MyGalleryProviderClient : System.ServiceModel.ClientBase<IMyGalleryProvider>, IMyGalleryProvider {
        
        public MyGalleryProviderClient() {
        }
        
        public MyGalleryProviderClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MyGalleryProviderClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyGalleryProviderClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MyGalleryProviderClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Model.Photo[] ShowAlbum(int albumID, string userName) {
            return base.Channel.ShowAlbum(albumID, userName);
        }
        
        public System.Threading.Tasks.Task<Model.Photo[]> ShowAlbumAsync(int albumID, string userName) {
            return base.Channel.ShowAlbumAsync(albumID, userName);
        }
        
        public Model.Photo[] ShowPublicAlbum(int albumID) {
            return base.Channel.ShowPublicAlbum(albumID);
        }
        
        public System.Threading.Tasks.Task<Model.Photo[]> ShowPublicAlbumAsync(int albumID) {
            return base.Channel.ShowPublicAlbumAsync(albumID);
        }
        
        public Model.Album[] ShowGallery(string userName) {
            return base.Channel.ShowGallery(userName);
        }
        
        public System.Threading.Tasks.Task<Model.Album[]> ShowGalleryAsync(string userName) {
            return base.Channel.ShowGalleryAsync(userName);
        }
        
        public Model.Album[] ShowOnlyPublic() {
            return base.Channel.ShowOnlyPublic();
        }
        
        public System.Threading.Tasks.Task<Model.Album[]> ShowOnlyPublicAsync() {
            return base.Channel.ShowOnlyPublicAsync();
        }
        
        public bool CreateAlbum(string album, string description, string userName) {
            return base.Channel.CreateAlbum(album, description, userName);
        }
        
        public System.Threading.Tasks.Task<bool> CreateAlbumAsync(string album, string description, string userName) {
            return base.Channel.CreateAlbumAsync(album, description, userName);
        }
        
        public byte[] GetPhoto(int photoID) {
            return base.Channel.GetPhoto(photoID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetPhotoAsync(int photoID) {
            return base.Channel.GetPhotoAsync(photoID);
        }
        
        public byte[] GetThumbnail(int albumID, int photoID) {
            return base.Channel.GetThumbnail(albumID, photoID);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetThumbnailAsync(int albumID, int photoID) {
            return base.Channel.GetThumbnailAsync(albumID, photoID);
        }
        
        public bool ImageUpload(Model.UploadImage imageToUpload) {
            return base.Channel.ImageUpload(imageToUpload);
        }
        
        public System.Threading.Tasks.Task<bool> ImageUploadAsync(Model.UploadImage imageToUpload) {
            return base.Channel.ImageUploadAsync(imageToUpload);
        }
        
        public bool DeleteAlbum(int albumID) {
            return base.Channel.DeleteAlbum(albumID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAlbumAsync(int albumID) {
            return base.Channel.DeleteAlbumAsync(albumID);
        }
        
        public bool DeletePhoto(int photoID) {
            return base.Channel.DeletePhoto(photoID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePhotoAsync(int photoID) {
            return base.Channel.DeletePhotoAsync(photoID);
        }
        
        public bool PublishAlbum(int albumID) {
            return base.Channel.PublishAlbum(albumID);
        }
        
        public System.Threading.Tasks.Task<bool> PublishAlbumAsync(int albumID) {
            return base.Channel.PublishAlbumAsync(albumID);
        }
        
        public bool UnPublishAlbum(int albumID) {
            return base.Channel.UnPublishAlbum(albumID);
        }
        
        public System.Threading.Tasks.Task<bool> UnPublishAlbumAsync(int albumID) {
            return base.Channel.UnPublishAlbumAsync(albumID);
        }
        
        public int ActivateAcc(string activationCode) {
            return base.Channel.ActivateAcc(activationCode);
        }
        
        public System.Threading.Tasks.Task<int> ActivateAccAsync(string activationCode) {
            return base.Channel.ActivateAccAsync(activationCode);
        }
        
        public void GenerateAndInsertThumbnail(Model.Photo photo, Size thumbSize) {
            base.Channel.GenerateAndInsertThumbnail(photo, thumbSize);
        }
        
        public System.Threading.Tasks.Task GenerateAndInsertThumbnailAsync(Model.Photo photo, Size thumbSize) {
            return base.Channel.GenerateAndInsertThumbnailAsync(photo, thumbSize);
        }
        
        public Model.Photo[] PhotosWithoutThumb() {
            return base.Channel.PhotosWithoutThumb();
        }
        
        public System.Threading.Tasks.Task<Model.Photo[]> PhotosWithoutThumbAsync() {
            return base.Channel.PhotosWithoutThumbAsync();
        }
    }
}
